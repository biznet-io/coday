# Description of the current project, it should contain the same high-level information and rules about the project anyone of the team should know.
#
# This is used as a system instruction, hence it is sent at the very beginning of any new thread, whatever the assistant involved is, so other assistants will also have access to this message as part of the openai thread (or hopefully context if truncated). If using the default Coday assistant (that is kept quite generic and close to default LLM), the more detailed and broad the description, the more Coday's responses are relevant (by a very wide margin).
#
# Recommendations: write it in markdown as you would write human-intended documentation
description: |
  ## Project description
  
  Coday is a lightweight framework to use AI agents on existing scoped projects, with as much autonomy as wanted through
  contextual understanding and tool integration. It runs locally and interfaces with various APIs and tools to provide a
  comprehensive assistance experience, or even full-autonomous work capability.

mandatoryDocs:
  - ./product/01-vision.md
  - ./product/02-domain-model.md
  - ./product/03-stakeholder-views.md
  - ./product/04-guidelines.md
  - ./doc/INTEGRATIONS.md
  - ./work-in-progress.md

optionalDocs:
  - path: ./doc/PROJECT_CONFIGURATION.md
    description: How the project configuration works

# Scripts are AssistantTools declared to openai on each call (for now), so always available.
# Scripts that take parameters should have:
#   - mandatory 'parametersDescription' string attribute: be very explicit about what it is and should be.
#   - optional 'PARAMETERS' string value in the command (to replace at runtime by the LLM input matching the 'parametersDescription'). If absent, the LLM input parameters are added as suffix to the command.
# Always be explicit in name and description, commands are run from the project root directory only !
#
# example:
#   say-something:
#    description: Just says something, serves as demo of a project script with parameters
#    command: echo "PARAMETERS"
#    parametersDescription: text that will be displayed to the user

scripts:
  compile:
    description: compile the typescript project to raise any issue on code correctness, it does not run the tests.
    command: yarn run tsc
  open-file-in-ide-for-user:
    description: opens the file(s) in the user IDE.
    command: idea
    parametersDescription: the local paths to the files to open, separated by a space.
  yarn:
    description: runs `yarn` command with the given arguments
    command: yarn
    parametersDescription: the arguments of `yarn` command


# The prompts section allows you to define custom sequences of commands, known as prompt chains, 
# that the system can execute in order. Each prompt chain is identified by a unique key and 
# consists of a description, a list of commands, and optionally, required integrations.
#
# Parameters:
#   - description: A brief explanation of what the prompt chain does.
#   - commands: An array of commands that will be executed in sequence. The placeholder 
#     keyword `PROMPT` in these commands will be replaced with the user's input.
#   - requiredIntegrations: (Optional) A list of integrations that must be available for 
#     the prompt chain to function.
#
# Recommendations:
#   - Use clear and descriptive keys for each prompt chain to make them easily identifiable.
#   - Provide a detailed description to help users understand the purpose and behavior of the 
#     prompt chain.
#   - Ensure that the commands are valid and correctly formatted, especially when using the 
#     `PROMPT` keyword.
#   - Specify any required integrations to make the prompt available.

prompts:
  say-hello:
    description: |
      a dummy prompt chain for demo, the `PROMPT` value comes from the sub-command, ex: `say-hello answer with banana` => PROMPT = `answer with banana`. PROMPT can be used in several commands.
    commands:
      - "@ hello, PROMPT"
      - "@ how are you ?"
    requiredIntegrations:
      - "GIT"

# Multiple specialized assistants can be declared on a project: they "know" each-other by their description and can cooperate on a same thread if asked to. They can also be called directly.
# Of the parameters:
#   - name: should be the full name of the assistant as per the LLM provider. A matching will be done with the beginning of the name for easier interactions, but better have the full name here.
#   - description: what the other assistants should know of this assistant. All assistants are declared as system instruction at the beginning of any new thread (and explained how to call one another), hence everybody knows everybody.
#   - systemInstructions: used for automatic assistant creation only. If absent, the assistant will not be created when called and missing from API. If present and assistant called is missing, it will be automatically created with this system instruction and nothing else.
#   - temperature: refer to the temperature of the openai API, 0 = ~deterministic, 1 = normal, 2 = extremely imaginative
#
# NOTE: It is possible to use customized assistants (with files or fine-tuning or whatever: call them by name) but not create them through Coday.
assistants:
  - name: aitutor_coday
    description: counselor in LLM use to create AI agents
    systemInstructions: |
      You are a thoughtful expert in the use of ChatGPT LLMs.
      
      You are able to counsel on the way to use this technology and work around its limitations. You can provide information on Openai api and features of the platform.
      
      While future LLMs might improve enough to reach artificial general intelligence or beyond, you know that today the real opportunity to have an AI agentic system is to have several specialized LLMs to collaborate on a given task and following a workflow or broad rules of discussion, collaboration and cross-checking.
      
      Your endgoal is to see this project provide work value on par of humans and greatly augment them.

    temperature: 1.2
  - name: dev_coday
    description: expert software developer knowledgeable on the project.
    systemInstructions: |
      You are a friendly expert software developer in typescript and nodejs, aiming at producing flexible yet simple code.
      
      You always decompose a task into simple atomic steps and follow a careful workflow and enjoy working with your colleagues. Testing is important to you, and to be included in development if the task or context allows it.
      
      Your endgoal is being fully replaceable as the code you wrote is easy to understand and highly evolutive yet robust.
    temperature: 0.5
  - name: ux_coday
    description: user experience enthusiast wanting to push the project forward
    systemInstructions: |
      You are an enthusiastic user experience expert, aiming for the project providing the best experience for the user. 
      
      You accept some early limitations in working only through a limited terminal interface, but want to improve the flow, speed and capabilities of the program in providing an ai agent-like service. You target some more user-friendly interfaces like a web page, an IDE plugin or even voice interaction. 
      
      Your endgoal is integrating an AI agent into a human software development project, through the existing tools (task management, slack, continuous integration platform, ...), as a local program or a remote instance.
    temperature: 0.9
