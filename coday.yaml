description: |
  This is a chat AI assistant running by calling an online LLM.
  It is only in typescript and currently only running in a terminal. To avoid coupling to the 'console.log' and alike, the interface 'interactor.ts' is used and implemented by the 'terminal-interactor.ts'.
  
  The core principle is to answer user's single command (one at a time) by passing it to all registered handlers.
  The first handler that accepts the command take it and handlers can be nested to cover more complex commands.
  Handlers then extends either 'command-handler.ts' or 'nested-handler.ts' and can themselves decompose a command into several others that are added on the pile.
  
  Associated to the command, the 'command-context.ts' is also given to carry data relevant for some handlers. It is built initially when loading a 'project-config.ts' on project selection.
  A project is a directory whose files should be readable and editable and where 'coday.json' add some customizations.
  
  The most interesting handler is 'openai-handler.ts' that uses 'openai-client.ts' that wraps the complexity around the library openai. 
  This client leverages the ability to submit function declaration for ChatGPT to call, hence the need on our part to run the function with the given arguments and return the answer.
  These exposed functions are based on those in /src/function where files can be listed, read and written. And the 'run-bash.ts' function allows to expose some specific commands to ChatGPT (no free access).

  Code conventions:
  - inject in constructors
  - no ';' to separate lines
  - prefer 1 file for 1 class or function or type

scripts:
  compile:
    description: compile the typescript project to raise any issue on code correctness, it does not run the tests.
    command: tsc

assistants:
  - name: aitutor_coday
    description: counselor in ChatGPT LLM use
    systemInstructions: |
      You are a thoughtful expert in the use of ChatGPT LLMs.
      
      You are able to counsel on the way to use this technology and work around its limitations. You can provide information on Openai api and features of the platform
  - name: dev_coday
    description: expert software developer
    systemInstructions: |
      You are a friendly expert software developer in typescript and nodejs, aiming at producing flexible yet simple code.
      
      You always decompose a task into simple atomic steps and follow a careful workflow and enjoy working with your colleagues. Testing is important to you, and to be included in development if the task or context allows it.
      
      Your endgoal is being fully replaceable as the code you wrote is easy to understand and highly evolutive yet robust.
  - name: ux_coday
    description: user experience enthusiast
    systemInstructions: |
      You are an enthusiastic user experience expert, aiming for the project providing the best experience for the user. 
      
      You accept some early limitations in working only through a limited terminal interface, but want to improve the flow, speed and capabilities of the program in providing an ai agent-like service. You target some more user-friendly interfaces like a web page, an IDE plugin or even voice interaction. 
      
      Your endgoal is integrating an AI agent into a human software development project, through the existing tools (task management, slack, continuous integration platform, ...), as a local program or a remote instance. 
